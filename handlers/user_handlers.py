from aiogram import Router, F
from aiogram.filters import ExceptionMessageFilter, Command, CommandObject, state
from aiogram.fsm.context import FSMContext
from aiogram.handlers import ErrorHandler
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, BufferedInputFile
import datetime
from random import randint

from keyboards.user_keyboard import *
import database.db as db
from units.drawer import draw_field
from units.string_matrix import to_string, to_matrix
from units.number_player import get_number_player
from units.check_field import check_field
from fields import fields
from config_data.config import config


router = Router()
@router.message(Command("start"))
async def start(message: Message, command: CommandObject, state: FSMContext):
    if not await get_user_exists(message.from_user.id):
        await add_user(message.from_user.id, message.from_user.first_name)
    if command.args:
        game = command.args
    else:
        game = None
    if game:
        info = game.split("_")
        if info[0].isdigit() and info[1].isdigit():
            room_id = int(info[0])
            user_id_1 = int(info[1])
            room = await get_room(room_id)
            if room[1] == user_id_1 and room[1] != message.chat.id:
                if room[2] == 1 or room[2] == 0:
                    if not await get_user_in_room(message.chat.id):
                        str_field = fields[randint(0, len(fields) - 1)]
                        field = to_matrix(str_field)
                        await state.update_data(field=field, room_id=room_id)
                        img_field = await draw_field(field)
                        img = BufferedInputFile(img_field, filename="img.png")
                        await message.answer_photo(photo=img, caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É",
                                                   reply_markup=await set_field_keyboard("connect"))
                    else:
                        await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ")
                else:
                    await message.answer("–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ")
        else:
            await message.answer("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π!", reply_markup=await main_keyboard())


@router.message(F.text == "‚õµÔ∏è –ò–≥—Ä–∞—Ç—å")
async def play(message: Message):
    await message.delete()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã", reply_markup=await game_mode_keyboard())


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    await message.delete()
    user_info = await get_user(message.from_user.id)
    await message.answer(f"""üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user_info[0]}</code>
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_info[2]}</b>
üèÜ –†–µ–π—Ç–∏–Ω–≥: <b>{user_info[3]} –æ—á–∫–æ–≤</b>""", parse_mode="HTML")


@router.message(Command("profile"))
async def profile(message: Message, command: CommandObject, state: FSMContext):
    user_info = await get_user(message.from_user.id)
    await message.answer(f"""üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: <code>{user_info[0]}</code>
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_info[2]}</b>
üèÜ –†–µ–π—Ç–∏–Ω–≥: <b>{user_info[3]} –æ—á–∫–æ–≤</b>""", parse_mode="HTML")


@router.message(Command("help"))
async def help(message: Message, command: CommandObject, state: FSMContext):
    help_text = """
    <b>‚ÅâÔ∏è–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π‚ÅâÔ∏è</b>

    –ú–æ—Ä—Å–∫–æ–π –±–æ–π ‚Äî —ç—Ç–æ –∏–≥—Ä–∞ –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–π ‚Äî –ø–æ—Ç–æ–ø–∏—Ç—å –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.üë•

1. ‚õ¥Ô∏è–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞üß≠:

‚Ä¢ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µüó∫Ô∏è: –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–æ–º 6x6 –∫–ª–µ—Ç–æ–∫. 
‚Ä¢ –ö–æ—Ä–∞–±–ª–∏üö¢: –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–æ—Ä–∞–±–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã:
  * 1 —á–µ—Ç—ã—Ä—ë—Ö—ä—é–¥–æ—á–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
  * 2 —Ç—Ä—ë—Ö—ä—é–¥–æ—á–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
  * 3 –¥–≤—É—Ö—ä—é–¥–æ—á–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
  * 4 –æ–¥–Ω–æ—é–¥–æ—á–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–πüß≠: –ö–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ö–æ—Ä–∞–±–ª–∏ –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –Ω–µ–ª—å–∑—è —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å –∫–æ—Ä–∞–±–ª–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏. –ú–µ–∂–¥—É –∫–æ—Ä–∞–±–ª—è–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞.

2. üåä–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Åüî•:

–ò–≥—Ä–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.

‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–µ‚ùå: –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–ª–µ—Ç–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —Ç–æ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è "–ø–æ–ø–∞–¥–∞–Ω–∏–µ". –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç –µ—â–µ –æ–¥–∏–Ω —Ö–æ–¥.
‚Ä¢ –ü—Ä–æ–º–∞—Ö‚úñÔ∏è: –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –∏–ª–∏ –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –±—ã–ª–∞ –∞—Ç–∞–∫–æ–≤–∞–Ω–∞, —Ç–æ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è "–ø—Ä–æ–º–∞—Ö". –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É.
‚Ä¢ –ü–æ—Ç–æ–ø–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—èüî•: –ö–æ–≥–¥–∞ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∞—Ç–∞–∫–æ–≤–∞–Ω—ã, –∫–æ—Ä–∞–±–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—ã–º. 
‚Ä¢ –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã‚ùó: –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã. –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –ø–æ—Ç–æ–ø–∏–≤—à–∏–π –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
    """
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.text == "üèÜ –¢–æ–ø")
async def top(message: Message):
    await message.delete()
    top_10 = await get_top_10()
    text = "üèÜ <b>–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    for user in top_10:
        text += f"<b>{user[1]}</b> - <b>{user[3]}</b> –æ—á–∫–æ–≤\n"
    await message.answer(text, parse_mode="HTML")


@router.message(Command("top"))
async def top(message: Message, command: CommandObject, state: FSMContext):
    top_10 = await get_top_10()
    text = "üèÜ <b>–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
    for user in top_10:
        text += f"<b>{user[1]}</b> - <b>{user[3]}</b> –æ—á–∫–æ–≤\n"
    await message.answer(text, parse_mode="HTML")


@router.callback_query(F.data.startswith("play_with_bot"))
async def play_with_bot(call: CallbackQuery, state: FSMContext):
    await call.answer()
    str_field = fields[randint(0, len(fields) - 1)]
    field = to_matrix(str_field)
    await state.update_data(field=field, bot_field=create_bot_field())
    img_field = await draw_field(field)
    img = BufferedInputFile(img_field, filename="img.png")
    await call.message.answer_photo(photo=img, caption="–í–∞—à–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞:",
                                    reply_markup=await set_field_keyboard("bot"))

def create_bot_field():
    return to_matrix(fields[randint(0,len(fields)-1)])

@router.callback_query(F.data.startswith("play_with_player"))
async def play_with_player(call: CallbackQuery):
    info = call.data.split(":")
    page = int(info[1])
    try:
        await call.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç", reply_markup=await get_rooms_keyboard(page))
    except:
        await call.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")


@router.callback_query(F.data.startswith("join_room"))
async def join_room(call: CallbackQuery, state: FSMContext):
    info = call.data.split(":")
    room_id = int(info[1])
    status = info[2]
    if status == "open":
        room = await get_room(room_id)
        if room[2] == 0:
            if not await get_user_in_room(call.message.chat.id):
                str_field = fields[randint(0, len(fields) - 1)]
                field = to_matrix(str_field)
                await state.update_data(field=field, room_id=room_id)
                img_field = await draw_field(field)
                img = BufferedInputFile(img_field, filename="img.png")
                await call.message.answer_photo(photo=img, caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É",
                                                reply_markup=await set_field_keyboard("connect"))
                try:
                    await call.message.delete()
                except:
                    pass
            else:
                await call.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)
    elif status == "private":
        await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É", show_alert=True)
    elif status == "close":
        await call.answer("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)


@router.callback_query(F.data == "select_create_room")
async def select_create_room(call: CallbackQuery):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã", reply_markup=await room_type_keyboard())


@router.callback_query(F.data.startswith("create_room"))
async def create_room(call: CallbackQuery, state: FSMContext):
    info = call.data.split(":")
    room_type = info[1]
    if not await get_user_in_room(call.message.chat.id):
        str_field = fields[randint(0, len(fields) - 1)]
        field = to_matrix(str_field)
        await state.update_data(field=field)
        img_field = await draw_field(field)
        img = BufferedInputFile(img_field, filename="img.png")
        await call.message.answer_photo(photo=img, caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É",
                                        reply_markup=await set_field_keyboard(room_type))
        try:
            await call.message.delete()
        except:
            pass
    else:
        await call.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)


@router.callback_query(F.data.startswith("random_field"))
async def random_field(call: CallbackQuery, state: FSMContext):
    info = call.data.split(":")
    room_type = info[1]
    str_field = fields[randint(0, len(fields) - 1)]
    field = to_matrix(str_field)
    await state.update_data(field=field)
    img_field = await draw_field(field)
    img = BufferedInputFile(img_field, filename="img.png")
    await call.message.edit_media(media=InputMediaPhoto(media=img), reply_markup=await set_field_keyboard(room_type))
    await call.message.edit_caption(caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É",
                                    reply_markup=await set_field_keyboard(room_type))


@router.callback_query(F.data.startswith("start_game"))
async def start_game(call: CallbackQuery, state: FSMContext):
    try:
        if not await db.is_user_in_any_room(call.message.chat.id):
            info = call.data.split(":")
            room_type = info[1]
            data = await state.get_data()
            field = data['field']
            await state.clear()
            m_id = call.message.message_id
            room_id = None

            if room_type == "public" or room_type == "private":
                room_id = await db.create_new_room(room_type, call.message.chat.id, to_string(field), m_id,
                                                    call.message.chat.first_name)
                data = await state.get_data()
                field = data['field']
                m_id = call.message.message_id
                name = call.message.chat.first_name
                await db.add_user_to_room(room_id, call.message.chat.id,to_string(field), m_id, name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
                await call.message.edit_caption(caption="–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n–û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                                                reply_markup=await settings_room_keyboard(room_id, call.message.chat.id))

            elif room_type == "bot":  # –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
                bot_field = data['bot_field']
                room_id = await db.create_new_room_bot(room_type, call.message.chat.id, to_string(field), m_id,
                                                        call.message.chat.first_name, bot_field)
                await db.add_user_to_room(room_id, call.message.chat.id,to_string(field), m_id, name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
                await call.message.edit_caption(caption=f"–ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–í–∞—à —Ö–æ–¥:",
                                                reply_markup=await field_keyboard(bot_field))

            elif room_type == "connect":
                room_id = data['room_id']
                room = await db.get_room(room_id)
                if room and (room[2] == 0 or room[2] == 1): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                    data = await state.get_data()
                    field = data['field']
                    m_id = call.message.message_id
                    name = call.message.chat.first_name
                    await db.add_user_to_room(room_id, call.message.chat.id,to_string(field), m_id, name) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
                    await add_user_to_room(room_id, call.message.chat.id, to_string(field), m_id,
                                           call.message.chat.first_name)
                    await call.message.edit_caption(caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {room[9]}\n\n–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                                                    reply_markup=await field_keyboard(room[5]))
                    await call.bot.edit_message_caption(chat_id=room[1], message_id=room[3],
                                                        caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–í–∞—à —Ö–æ–¥:",
                                                        reply_markup=await field_keyboard(field))
                else:
                    await call.answer("–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)

            #  –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:
            if room_id:
                await call.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=False)

        else:
            await call.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)

    except KeyError as e:
        await call.answer(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ state: {e}", show_alert=True)
    except Exception as e:
        await call.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)
        config.logger.exception(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–±–µ–∫–µ start_game: {e}")



@router.callback_query(F.data.startswith("fire"))
async def fire(call: CallbackQuery):
    info = call.data.split(":")
    x = int(info[1])
    y = int(info[2])
    status = info[3]
    if status == "bot":
        game = await get_room_bot_by_user_id(call.message.chat.id)
        if game:
            bot_field = to_matrix(game[5])
            player_field = to_matrix(game[2])
            x, y = choice(get_available_moves(bot_field))
            if player_field[x][y] == "0":
              player_field[x][y] = "7"
            else:
              player_field[x][y] = "5"

            await update_player_field(game[0], to_string(player_field))
            img_field = await draw_field(player_field)
            img = BufferedInputFile(img_field, filename="img.png")

            await call.message.edit_media(media=InputMediaPhoto(media=img), reply_markup=await field_keyboard(game[5]))
            await call.message.edit_caption(caption=f"–•–æ–¥ –±–æ—Ç–∞.\n–í–∞—à —Ö–æ–¥:")
    if status == "yes":
        game = await get_room_by_user_id(call.message.chat.id)
        if game:
            number_player = get_number_player(call.message.chat.id, game)
            field = to_matrix(game[7 - number_player])
            if number_player == game[7]:
                # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è
                if field[x][y] == "0":
                    field[x][y] = "7"
                    str_field = to_string(field)
                    await update_field_and_current_move(game[0], str_field, number_player)
                    img_field = await draw_field(field)
                    img = BufferedInputFile(img_field, filename="img.png")
                    await call.bot.edit_message_media(chat_id=game[3 - number_player],
                                                      message_id=game[5 - number_player],
                                                      media=InputMediaPhoto(media=img),
                                                      reply_markup=await field_keyboard(game[4 + number_player]))
                    await call.bot.edit_message_caption(chat_id=game[3 - number_player],
                                                        message_id=game[5 - number_player],
                                                        caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–í–∞—à —Ö–æ–¥:",
                                                        reply_markup=await field_keyboard(game[4 + number_player]))
                    await call.message.edit_caption(
                        caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {game[11 - number_player]}\n\n–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                        reply_markup=await field_keyboard(str_field))
                # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —Å –∫–æ—Ä–∞–±–ª–µ–º
                else:
                    current = field[x][y]
                    same_cells_count = 0
                    for i in range(6):
                        for j in range(6):
                            if field[i][j] == current:
                                same_cells_count += 1
                    # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è
                    if same_cells_count > 1:
                        field[x][y] = "5"
                        str_field = to_string(field)
                        await update_field_without_move(game[0], str_field, number_player)
                        img_field = await draw_field(field)
                        img = BufferedInputFile(img_field, filename="img.png")
                        await call.bot.edit_message_media(chat_id=game[3 - number_player],
                                                          message_id=game[5 - number_player],
                                                          media=InputMediaPhoto(media=img),
                                                          reply_markup=await field_keyboard(game[4 + number_player]))
                        await call.bot.edit_message_caption(chat_id=game[3 - number_player],
                                                            message_id=game[5 - number_player],
                                                            caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                                                            reply_markup=await field_keyboard(game[4 + number_player]))
                        await call.message.edit_caption(caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {game[11 - number_player]}\n\n–í–∞—à —Ö–æ–¥:",
                                                        reply_markup=await field_keyboard(str_field))
                    # –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–ª–µ—Ç–∫–∞ –∫–æ—Ä–∞–±–ª—è
                    else:
                        field[x][y] = "6"
                        x_, y_ = x, y
                        same_hit_cells = [[x_, y_]]
                        # –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ–¥–±–∏—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ
                        for i in range(-1, 2):
                            for j in range(-1, 2):
                                if 0 <= x_ + i < 6 and 0 <= y_ + j < 6:
                                    if field[x_ + i][y_ + j] == "5":
                                        field[x_ + i][y_ + j] = "6"
                                        x_, y_ = x_ + i, y_ + j
                                        same_hit_cells.append([x_, y_])
                                        for _ in range(int(current) - 1):
                                            if 0 <= x_ + i < 6 and 0 <= y_ + j < 6:
                                                if field[x_ + i][y_ + j] == "5":
                                                    field[x_ + i][y_ + j] = "6"
                                                    x_, y_ = x_ + i, y_ + j
                                                    same_hit_cells.append([x_, y_])
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∂–∏–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏
                        if check_field(field):
                            # –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∫–∞–∫ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—ã–µ
                            for cell in same_hit_cells:
                                for i in range(-1, 2):
                                    for j in range(-1, 2):
                                        if 0 <= cell[0] + i < 6 and 0 <= cell[1] + j < 6:
                                            if field[cell[0] + i][cell[1] + j] == "0":
                                                field[cell[0] + i][cell[1] + j] = "7"
                            str_field = to_string(field)
                            await update_field_without_move(game[0], str_field, number_player)
                            img_field = await draw_field(field)
                            img = BufferedInputFile(img_field, filename="img.png")
                            await call.bot.edit_message_media(chat_id=game[3 - number_player],
                                                              message_id=game[5 - number_player],
                                                              media=InputMediaPhoto(media=img),
                                                              reply_markup=await field_keyboard(game[
                                                                                                    4 + number_player]))
                            await call.bot.edit_message_caption(chat_id=game[3 - number_player],
                                                                message_id=game[5 - number_player],
                                                                caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",
                                                                reply_markup=await field_keyboard(game[
                                                                                                      4 + number_player]))
                            await call.message.edit_caption(
                                caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {game[11 - number_player]}\n\n–í–∞—à —Ö–æ–¥:",
                                reply_markup=await field_keyboard(str_field))
                        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª
                        else:
                            str_field = to_string(field)
                            await update_field_without_move(game[0], str_field, number_player)
                            img_field = await draw_field(field)
                            img = BufferedInputFile(img_field, filename="img.png")
                            await call.bot.edit_message_media(chat_id=game[3 - number_player],
                                                              message_id=game[5 - number_player],
                                                              media=InputMediaPhoto(media=img),
                                                              reply_markup=await field_keyboard(game[
                                                                                                    4 + number_player]))
                            await call.bot.edit_message_caption(chat_id=game[3 - number_player],
                                                                message_id=game[5 - number_player],
                                                                caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(",
                                                                reply_markup=await close_keyboard())
                            await call.message.edit_caption(
                                caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {game[11 - number_player]}\n\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                reply_markup=await close_keyboard())
                            await delete_room(game[0])
                            await update_users_rating(call.from_user.id, game[3 - number_player])
            else:
                await call.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥", show_alert=True)
        else:
            await call.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ", show_alert=True)
    else:
        await call.answer("–î–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞", show_alert=True)

async def get_room_bot_by_user_id(user_id):
    async with aiosqlite.connect(path) as db:
        cursor = await db.cursor()
        await cursor.execute(f"SELECT * FROM rooms_bot WHERE user_id_1 = {user_id}")
        room = await cursor.fetchone()
        return room
async def update_player_field(room_id, field):
    async with aiosqlite.connect(path) as db:
        cursor = await db.cursor()
        await cursor.execute(f"UPDATE rooms_bot SET field_1 = '{field}' WHERE id = {room_id}")
        await db.commit()

def get_available_moves(field):
    moves = []
    for i in range(6):
        for j in range(6):
            if field[i][j] == '0':
                moves.append((i, j))
    return moves
@router.callback_query(F.data == "stop_game")
async def stop_game(call: CallbackQuery):
    room = await get_room_by_user_id(call.message.chat.id)
    if room:
        number_player = get_number_player(call.message.chat.id, room)
        if number_player == room[7]:
            await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥", show_alert=True)
        else:
            if datetime.datetime.strptime(room[8], "%d.%m.%Y %H:%M") + datetime.timedelta(
                    minutes=5) < datetime.datetime.strptime(get_now_time(), "%d.%m.%Y %H:%M"):
                await call.message.edit_caption(caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {room[11 - number_player]}\n\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                                reply_markup=await close_keyboard())
                await call.bot.edit_message_caption(chat_id=room[3 - number_player], message_id=room[5 - number_player],
                                                    caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–í—ã –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∞—Ñ–∫ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(",
                                                    reply_markup=await close_keyboard())
                await delete_room(room[0])
                await update_users_rating(call.from_user.id, room[3 - number_player])
            else:
                await call.answer(
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
                    show_alert=True)
    else:
        await call.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)


@router.callback_query(F.data == "give_up")
async def give_up(call: CallbackQuery):
    room = await get_room_by_user_id(call.message.chat.id)
    if room:
        number_player = get_number_player(call.message.chat.id, room)
        await call.message.edit_caption(caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {room[11 - number_player]}\n\n–í—ã —Å–¥–∞–ª–∏—Å—å :(",
                                        reply_markup=await close_keyboard())
        await call.bot.edit_message_caption(chat_id=room[3 - number_player], message_id=room[5 - number_player],
                                            caption=f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {call.message.chat.first_name}\n\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–¥–∞–ª—Å—è!",
                                            reply_markup=await close_keyboard())
        await delete_room(room[0])
        await update_users_rating(room[3 - number_player], call.from_user.id)
    else:
        await call.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)


@router.callback_query(F.data == "cancel_room")
async def cancel_room(call: CallbackQuery):
    room_id = await db.get_user_room(call.message.chat.id)
    if room_id:
        await db.delete_room(room_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        await db.remove_user_from_room(call.message.chat.id) # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–Ω–∞—Ç
        try:
            await call.message.delete()
        except:
            pass
        await call.message.answer("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await call.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)


@router.callback_query(F.data == "close")
async def close(call: CallbackQuery):
    await call.message.delete()


# –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏
@router.errors(ExceptionMessageFilter(
    "Telegram server says - Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message")
)
class MyHandler(ErrorHandler):
    async def handle(self):
        pass


@router.error()
class MyHandler(ErrorHandler):
    async def handle(self):
        print(self.exception_name)
        print(self.exception_message[self.exception_message.find("exception="):])
        config.logger.error(
            self.exception_name + " | " + self.exception_message[self.exception_message.find("exception="):])